
nios_blink.elf:     file format elf32-littlenios2
nios_blink.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000224 memsz 0x00000224 flags r-x
    LOAD off    0x00001244 vaddr 0x00008244 paddr 0x00008248 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000124c vaddr 0x0000824c paddr 0x0000824c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001248  2**0
                  CONTENTS
  2 .text         00000208  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000001c  00008228  00008228  00001228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00008244  00008248  00001244  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0000824c  0000824c  0000124c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00008258  00008258  00001248  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  00001278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00000bcf  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000078d  00000000  00000000  00001fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000009fd  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000001ac  00000000  00000000  0000315c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000005eb  00000000  00000000  00003308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000300  00000000  00000000  000038f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  00003bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000098  00000000  00000000  00003c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  00004a38  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00004a3b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004a3e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004a3f  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00004a40  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00004a4b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00004a56  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00004a61  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000026  00000000  00000000  00004a6b  2**0
                  CONTENTS, READONLY
 26 .jdi          000046f2  00000000  00000000  00004a91  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008228 l    d  .rodata	00000000 .rodata
00008244 l    d  .rwdata	00000000 .rwdata
0000824c l    d  .bss	00000000 .bss
00008258 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/DELL/cyclone4_fpga/nios_blink/software/nios_blink_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
0000811c g     F .text	0000002c alt_main
00008248 g       *ABS*	00000000 __flash_rwdata_start
00008148 g     F .text	00000038 alt_putstr
000081dc g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008250 g     O .bss	00000004 alt_argv
00010244 g       *ABS*	00000000 _gp
000081e4 g     F .text	00000028 memcpy
00008258 g       *ABS*	00000000 __bss_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000081d4 g     F .text	00000004 alt_dcache_flush_all
00008248 g       *ABS*	00000000 __ram_rwdata_end
00008244 g       *ABS*	00000000 __ram_rodata_end
00008244 g     O .rwdata	00000004 jtag_uart_0
00008258 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000081a4 g     F .text	00000030 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
000081a0 g     F .text	00000004 alt_sys_init
00008244 g       *ABS*	00000000 __ram_rwdata_start
00008228 g       *ABS*	00000000 __ram_rodata_start
00008258 g       *ABS*	00000000 __alt_stack_base
0000824c g       *ABS*	00000000 __bss_start
0000805c g     F .text	0000003c main
0000824c g     O .bss	00000004 alt_envp
00008228 g       *ABS*	00000000 __flash_rodata_start
00008180 g     F .text	00000020 alt_irq_init
00008254 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008248 g       *ABS*	00000000 _edata
00008258 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000d000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
0000820c g     F .text	0000001c strlen
000081d8 g     F .text	00000004 alt_icache_flush_all
00008098 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6809114 	ori	gp,gp,580
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a09314 	ori	r2,r2,33356

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e09614 	ori	r3,r3,33368

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00080980 	call	8098 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	000811c0 	call	811c <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
#include "altera_avalon_pio_regs.h"
#include "system.h"

int main()
{ 
  alt_putstr("Hello world from Nios II!\n");
    805c:	01000074 	movhi	r4,1
{ 
    8060:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello world from Nios II!\n");
    8064:	21208a04 	addi	r4,r4,-32216
{ 
    8068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello world from Nios II!\n");
    806c:	00081480 	call	8148 <alt_putstr>
    8070:	00ffffc4 	movi	r3,-1

  int count = 0;
  /* Event loop never exits. */
  while (1)
  {
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, ~count & 0x0f);
    8074:	188003cc 	andi	r2,r3,15
    8078:	01000074 	movhi	r4,1
    807c:	20840035 	stwio	r2,4096(r4)
    8080:	008007f4 	movhi	r2,31
    8084:	10a12004 	addi	r2,r2,-31616

	  for(int i = 0; i < 2000000; i++);
    8088:	10bfffc4 	addi	r2,r2,-1
    808c:	103ffe1e 	bne	r2,zero,8088 <main+0x2c>
  while (1)
    8090:	18ffffc4 	addi	r3,r3,-1
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, ~count & 0x0f);
    8094:	003ff706 	br	8074 <main+0x18>

00008098 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8098:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    809c:	01000074 	movhi	r4,1
    80a0:	01400074 	movhi	r5,1
    80a4:	dfc00015 	stw	ra,0(sp)
    80a8:	21209104 	addi	r4,r4,-32188
    80ac:	29609204 	addi	r5,r5,-32184
    80b0:	21400426 	beq	r4,r5,80c4 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    80b4:	01800074 	movhi	r6,1
    80b8:	31a09204 	addi	r6,r6,-32184
    80bc:	310dc83a 	sub	r6,r6,r4
    80c0:	00081e40 	call	81e4 <memcpy>
  if (to != from)
    80c4:	01000074 	movhi	r4,1
    80c8:	01400074 	movhi	r5,1
    80cc:	21200804 	addi	r4,r4,-32736
    80d0:	29600804 	addi	r5,r5,-32736
    80d4:	21400426 	beq	r4,r5,80e8 <alt_load+0x50>
      *to++ = *from++;
    80d8:	01800074 	movhi	r6,1
    80dc:	31a00804 	addi	r6,r6,-32736
    80e0:	310dc83a 	sub	r6,r6,r4
    80e4:	00081e40 	call	81e4 <memcpy>
  if (to != from)
    80e8:	01000074 	movhi	r4,1
    80ec:	01400074 	movhi	r5,1
    80f0:	21208a04 	addi	r4,r4,-32216
    80f4:	29608a04 	addi	r5,r5,-32216
    80f8:	21400426 	beq	r4,r5,810c <alt_load+0x74>
      *to++ = *from++;
    80fc:	01800074 	movhi	r6,1
    8100:	31a09104 	addi	r6,r6,-32188
    8104:	310dc83a 	sub	r6,r6,r4
    8108:	00081e40 	call	81e4 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    810c:	00081d40 	call	81d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8110:	dfc00017 	ldw	ra,0(sp)
    8114:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    8118:	00081d81 	jmpi	81d8 <alt_icache_flush_all>

0000811c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    811c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8120:	0009883a 	mov	r4,zero
{
    8124:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    8128:	00081800 	call	8180 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    812c:	00081a00 	call	81a0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8130:	d1a00217 	ldw	r6,-32760(gp)
    8134:	d1600317 	ldw	r5,-32756(gp)
    8138:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    813c:	dfc00017 	ldw	ra,0(sp)
    8140:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    8144:	000805c1 	jmpi	805c <main>

00008148 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8148:	defffe04 	addi	sp,sp,-8
    814c:	dc000015 	stw	r16,0(sp)
    8150:	dfc00115 	stw	ra,4(sp)
    8154:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8158:	000820c0 	call	820c <strlen>
    815c:	01000074 	movhi	r4,1
    8160:	000f883a 	mov	r7,zero
    8164:	100d883a 	mov	r6,r2
    8168:	800b883a 	mov	r5,r16
    816c:	21209104 	addi	r4,r4,-32188
#else
    return fputs(str, stdout);
#endif
#endif
}
    8170:	dfc00117 	ldw	ra,4(sp)
    8174:	dc000017 	ldw	r16,0(sp)
    8178:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    817c:	00081a41 	jmpi	81a4 <altera_avalon_jtag_uart_write>

00008180 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8180:	deffff04 	addi	sp,sp,-4
    8184:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    8188:	00081dc0 	call	81dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    818c:	00800044 	movi	r2,1
    8190:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8194:	dfc00017 	ldw	ra,0(sp)
    8198:	dec00104 	addi	sp,sp,4
    819c:	f800283a 	ret

000081a0 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    81a0:	f800283a 	ret

000081a4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    81a4:	21000017 	ldw	r4,0(r4)
{
    81a8:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
    81ac:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    81b0:	29800136 	bltu	r5,r6,81b8 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    81b4:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    81b8:	20c00137 	ldwio	r3,4(r4)
    81bc:	18ffffec 	andhi	r3,r3,65535
    81c0:	183ffb26 	beq	r3,zero,81b0 <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    81c4:	28c00007 	ldb	r3,0(r5)
    81c8:	29400044 	addi	r5,r5,1
    81cc:	20c00035 	stwio	r3,0(r4)
    81d0:	003ff706 	br	81b0 <altera_avalon_jtag_uart_write+0xc>

000081d4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    81d4:	f800283a 	ret

000081d8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    81d8:	f800283a 	ret

000081dc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    81dc:	000170fa 	wrctl	ienable,zero
}
    81e0:	f800283a 	ret

000081e4 <memcpy>:
    81e4:	2005883a 	mov	r2,r4
    81e8:	0007883a 	mov	r3,zero
    81ec:	30c0011e 	bne	r6,r3,81f4 <memcpy+0x10>
    81f0:	f800283a 	ret
    81f4:	28cf883a 	add	r7,r5,r3
    81f8:	39c00003 	ldbu	r7,0(r7)
    81fc:	10c9883a 	add	r4,r2,r3
    8200:	18c00044 	addi	r3,r3,1
    8204:	21c00005 	stb	r7,0(r4)
    8208:	003ff806 	br	81ec <memcpy+0x8>

0000820c <strlen>:
    820c:	2005883a 	mov	r2,r4
    8210:	10c00007 	ldb	r3,0(r2)
    8214:	1800021e 	bne	r3,zero,8220 <strlen+0x14>
    8218:	1105c83a 	sub	r2,r2,r4
    821c:	f800283a 	ret
    8220:	10800044 	addi	r2,r2,1
    8224:	003ffa06 	br	8210 <strlen+0x4>
